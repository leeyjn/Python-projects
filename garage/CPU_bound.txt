CPU bound means the program is bottlenecked by the CPU (Central Processing Unit). 
When your program is waiting for I/O (e.g., disk read/write, network read/write), the CPU is free to do other tasks, 
even if your program is stopped. The speed of your program will mostly depend on how fast that I/O can happen; 
if you want to speed it up, you'll need to speed up the I/O. If your program is running lots of program instructions and not waiting for I/O, 
then it's CPU bound. Speeding up the CPU will make the program run faster.

In either case, the key to speeding up the program might not be to speed up the hardware but to optimize the program to reduce the amount of I/O or CPU it needs. 
Or you can have it do I/O while it also does CPU-intensive work. 
CPU bound implies that upgrading the CPU or optimizing code will improve the overall computing performance.


sudo apt install python3-pip

python3

psutil (process and system utilities) is a cross-platform library for retrieving information on running processes and system utilization 
(CPU, memory, disks, network, sensors) in Python. 
It's mainly useful for system monitoring, profiling, and limiting process resources and management of running processes. 
Install the psutil python library using pip3:

Import psutil python3 module for checking CPU usage as well as the I/O and network bandwidth.

>>>import psutil
>>>psutil.cpu_percent()

So, you check the CPU usage, and it looks like the script only uses a single core to run. 
But your server has a bunch of cores, which means the task is CPU-bound.

Now, using psutil.disk_io_counters() and psutil.net_io_counters() 
you'll get byte read and byte write for disk I/O and byte received and byte sent for the network I/O bandwidth. 
For checking disk I/O, you can use the following command:

psutil.disk_io_counters()

For checking the network I/O bandwidth:
psutil.net_io_counters()

Basics rsync command
rsync(remote sync) is a utility for efficiently transferring and synchronizing files between a computer 
and an external hard drive and across networked computers by comparing the modification time and size of files. 
One of the important features of rsync is that it works on the delta transfer algorithm, 
which means it'll only sync or copy the changes from the source to the destination instead of copying the whole file. 
This ultimately reduces the amount of data sent over the network.

python3

>>>import subprocess
src = "<source-path>" # replace <source-path> with the source directory
dest = "<destination-path>" # replace <destination-path> with the destination directory
subprocess.call(["rsync", "-arq", src, dest])

